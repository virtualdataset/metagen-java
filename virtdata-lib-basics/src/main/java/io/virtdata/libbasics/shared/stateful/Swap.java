package io.virtdata.libbasics.shared.stateful;

import io.virtdata.annotations.Categories;
import io.virtdata.annotations.Category;
import io.virtdata.annotations.Example;
import io.virtdata.annotations.ThreadSafeMapper;
import io.virtdata.libbasics.SharedState;

import java.util.HashMap;
import java.util.function.Function;

/**
 * Load a named value from the per-thread state map.
 * The previous input value will be stored in the named value, and the previously
 * stored value will be returned. A default value to return may be provided
 * in case there was no previously stored value under the given name.
 */
@ThreadSafeMapper
@Categories({Category.state})
public class Swap implements Function<Object,Object> {

    private final String name;
    private final Function<Object,Object> nameFunc;
    private final Object defaultValue;

    @Example({"Swap('foo')","for the current thread" +
            ", swap the input value with the named variable and returned the named variable"})
    public Swap(String name) {
        this.name = name;
        this.nameFunc=null;
        this.defaultValue=null;
    }

    @Example({"Swap('foo','examplevalue')","for the current thread" +
            ", swap the input value with the named variable and returned the named variable" +
            ", or return the default value if the named value is not defined."})
    public Swap(String name, Object defaultValue) {
        this.name = name;
        this.nameFunc=null;
        this.defaultValue=defaultValue;
    }

    @Example({"Swap(NumberNameToString())","for the current thread" +
            ", swap the input value with the named variable and returned the named variable" +
            ", where the variable name is generated by the provided function."})
    public Swap(Function<Object,Object> nameFunc) {
        this.nameFunc = nameFunc;
        this.name = null;
        this.defaultValue=null;
    }

    @Example({"Swap(NumberNameToString(),'examplevalue')","for the current thread" +
            ", swap the input value with the named variable and returned the named variable" +
            ", where the variable name is generated by the provided function" +
            ", or the default value if the named value is not defined."})
    public Swap(Function<Object,Object> nameFunc, Object defaultValue) {
        this.nameFunc = nameFunc;
        this.name = null;
        this.defaultValue = defaultValue;
    }

    @Override
    public Object apply(Object o) {
        HashMap<String, Object> map = SharedState.tl_ObjectMap.get();
        String varname=(nameFunc!=null) ? String.valueOf(nameFunc.apply(o)) : name;

        Object output = map.get(varname);
        map.put(name,o);
        return (output!=null) ? output : defaultValue;
    }

}
